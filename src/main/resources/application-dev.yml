# 数据库配置
spring:
  datasource:
    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE:quantization}?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
    username: ${MYSQL_USERNAME:root}
    password: ${MYSQL_PASSWORD:123456}
    hikari:
      # 连接只读数据库时配置为true， 保证安全
      read-only: false
      # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
      connection-timeout: 30000
      # 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
      idle-timeout: 600000
      # 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';）
      max-lifetime: 1800000
      # 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
      maximum-pool-size: 15
    # 启动时需要初始化的建表语句,只会在默认数据源中执行
    schema: classpath:db/schema.sql
    # 初始化的数据,只会在只会在master数据源中执行
    data: classpath:db/data.sql
    # Initialize the datasource with available DDL and DML scripts.
    initialization-mode: ALWAYS
    # 遇到错误继续执行，由于jpa自动建表在初始化数据之后，所以程序第一次启动数据插不进去，第二次启动后数据才能初始化成功
    continue-on-error: true
  jpa:
    # Specify the DBMS
    database: MYSQL
    # Show or not log for each sql query
    show-sql: true
    hibernate:
      # Hibernate ddl auto (create, create-drop, update)
      # create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
      # create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
      # update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
      # validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
      ddl-auto: update
      naming:
        # 遇到大写字母 加”_”的命名
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    # 使用支持事务的数据库方言
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    open-in-view: true
    properties:
      hibernate:
        session_factory:
           # 数据权限控制拦截器
          statement_inspector: com.interceptor.JpaInterceptor

# 加解密
jasypt:
  encryptor:
    password: @spring.profiles.active@

